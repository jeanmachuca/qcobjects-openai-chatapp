{
  "version": 3,
  "sources": ["../../../node_modules/qcobjects-openai-api/public/static/js/packages/controllers/com.qcobjects.ui.controllers.openai.js", "../../../node_modules/qcobjects-openai-api/public/static/js/packages/components/com.qcobjects.ui.components.openai.js", "../../../node_modules/qcobjects-openai-api/public/static/js/packages/components/index.js", "../../../node_modules/qcobjects-openai-api/public/static/js/packages/components/index.cjs", "../../../build/js/chat.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatbotController = void 0;\nconst qcobjects_1 = require(\"qcobjects\");\nclass ChatbotController extends qcobjects_1.Controller {\n    constructor(controllerParams) {\n        super(controllerParams);\n        const { component } = controllerParams;\n        this.chatMessages = component.shadowRoot?.subelements(\"#chat-messages\").pop();\n        this.userInput = component.shadowRoot?.subelements(\"#user-input\").pop();\n    }\n    closeChat() {\n        this.component.body.remove();\n    }\n    sendMessage() {\n        if (this.userInput.value.trim() !== \"\") {\n            this.addMessage(this.userInput.value, \"user\");\n            this.getBotResponse(this.userInput.value);\n            this.userInput.value = \"\";\n        }\n    }\n    addMessage(text, sender) {\n        const message = document.createElement(\"div\");\n        message.textContent = text;\n        message.classList.add(\"message\", sender);\n        this.chatMessages.appendChild(message);\n        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;\n    }\n    async getBotResponse(userMessage) {\n        const botMessage = document.createElement(\"div\");\n        botMessage.textContent = \"Typing...\";\n        botMessage.classList.add(\"message\", \"bot\");\n        this.chatMessages.appendChild(botMessage);\n        const response = await fetch(\"/api/openai\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                \"model\": \"gpt-4o-mini\",\n                \"messages\": [{ \"role\": \"user\", \"content\": userMessage }],\n                \"temperature\": 0.7\n            })\n        });\n        try {\n            const data = await response.json();\n            if (typeof data.error !== \"undefined\") {\n                botMessage.textContent = data.error.message;\n            }\n            else {\n                botMessage.textContent = data.choices[0].text.trim();\n            }\n        }\n        catch (e) {\n            console.error(e);\n            botMessage.textContent = \"I'm sorry! I got an error connecting to the server.\";\n        }\n        this.userInput.value = \"\";\n        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;\n    }\n}\nexports.ChatbotController = ChatbotController;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.chatbotComponent = exports.ChatBotComponent = void 0;\nexports.sendMessage = sendMessage;\nexports.closeChatbot = closeChatbot;\nconst qcobjects_1 = require(\"qcobjects\");\nconst com_qcobjects_ui_controllers_openai_1 = require(\"../controllers/com.qcobjects.ui.controllers.openai\");\nclass ChatBotComponent extends qcobjects_1.Component {\n    constructor() {\n        super(...arguments);\n        this.tplsource = \"inline\";\n        this.shadowed = true;\n        this.template = `\n    <style>\n        body {\n            font-family: 'Roboto', sans-serif;\n            background-color: #e5ddd5;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n        }\n        .chat-container {\n            width: 100%;\n            height: 100%;\n            background-color: #fff;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            border-radius: 10px;\n            overflow: hidden;\n            display: flex;\n            flex-direction: column;\n            bottom: 0;\n            right:0;\n            left:0;\n            position: fixed;\n        }\n        .chat-header {\n            width: 100%;\n            top:0;\n            position: fixed;\n            background-color: #075e54;\n            color: #fff;\n            padding: 15px;\n            text-align: center;\n            font-size: 1.2em;\n        }\n        .chat-messages {\n            padding: 15px;\n            flex: 1;\n            overflow-y: auto;\n            display: flex;\n            flex-direction: column;\n            background-color: #e5ddd5;\n            justify-content: flex-end;\n        }\n        .chat-input {\n            display: flex;\n            border-top: 1px solid #ddd;\n        }\n        .chat-input input {\n            flex: 1;\n            padding: 15px;\n            border: none;\n            border-radius: 0;\n            font-size: 1em;\n        }\n        .chat-input button {\n            padding: 15px;\n            background-color: #075e54;\n            color: #fff;\n            border: none;\n            cursor: pointer;\n            font-size: 1em;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        .chat-input button img {\n            width: 20px;\n            height: 20px;\n        }\n        .message {\n            margin: 10px 0;\n            padding: 10px;\n            border-radius: 10px;\n            max-width: 70%;\n        }\n        .message.user {\n            align-self: flex-end;\n            background-color: #dcf8c6;\n        }\n        .message.bot {\n            align-self: flex-start;\n            background-color: #fff;\n            border: 1px solid #ddd;\n        }\n\n        .chat-close-button \n        {\n            color: white;\n            position: absolute;\n            top: 1px;\n            right: 1px;\n            background-color: transparent;\n            border: none;\n            font-size: 24px;\n            cursor: pointer;\n            z-index: 99999;\n            border-radius: 50%;\n            padding: 12px;\n        }\n        \n\n    </style>\n\n        <div class=\"chat-container\">\n            <div class=\"chat-close-button\" onclick=\"global.get('closeChatbot')()\">\u2B07\uFE0F</div>\n            <div class=\"chat-header\">QCObjects OpenAI Chatbot</div>\n            <div class=\"chat-messages\" id=\"chat-messages\"></div>\n            <div class=\"chat-input\">\n                <input type=\"text\" id=\"user-input\" placeholder=\"Type a message...\">\n                <button onclick=\"global.get('chatbotSendMessage')()\">\n                    <img src=\"https://img.icons8.com/ios-filled/50/ffffff/send.png\" alt=\"Send\">\n                </button>\n            </div>\n        </div>\n    `;\n    }\n}\nexports.ChatBotComponent = ChatBotComponent;\nexports.chatbotComponent = new ChatBotComponent({ name: \"chatbot\" });\nfunction sendMessage() {\n    exports.chatbotComponent.controller = new com_qcobjects_ui_controllers_openai_1.ChatbotController({ component: exports.chatbotComponent });\n    const chatbot = exports.chatbotComponent.controller;\n    chatbot.sendMessage();\n}\nfunction closeChatbot() {\n    exports.chatbotComponent.controller = new com_qcobjects_ui_controllers_openai_1.ChatbotController({ component: exports.chatbotComponent });\n    const chatbot = exports.chatbotComponent.controller;\n    chatbot.closeChat();\n}\nqcobjects_1.global.set(\"chatbotSendMessage\", sendMessage);\nqcobjects_1.global.set(\"closeChatbot\", closeChatbot);\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst com_qcobjects_ui_components_openai_1 = require(\"./com.qcobjects.ui.components.openai\");\nexports.default = { chatbotComponent: com_qcobjects_ui_components_openai_1.chatbotComponent, ChatBotComponent: com_qcobjects_ui_components_openai_1.ChatBotComponent, sendMessage: com_qcobjects_ui_components_openai_1.sendMessage };\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * QCObjects Microservice Template 1.x\n * ________________\n *\n * Author: Jean Machuca <correojean@gmail.com>\n *\n * Cross Browser Javascript Framework for MVC Patterns\n * QuickCorp/QCObjects is licensed under the\n * GNU Lesser General Public License v3.0\n * [LICENSE] (https://github.com/QuickCorp/QCObjects/blob/master/LICENSE.txt)\n *\n * Permissions of this copyleft license are conditioned on making available\n * complete source code of licensed works and modifications under the same\n * license or the GNU GPLv3. Copyright and license notices must be preserved.\n * Contributors provide an express grant of patent rights. However, a larger\n * work using the licensed work through interfaces provided by the licensed\n * work may be distributed under different terms and without source code for\n * the larger work.\n *\n * Copyright (C) 2015 Jean Machuca,<correojean@gmail.com>\n *\n * Everyone is permitted to copy and distribute verbatim copies of this\n * license document, but changing it is not allowed.\n*/\nconst index_1 = __importDefault(require(\"./index\"));\nexports.default = index_1.default;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst components_1 = __importDefault(require(\"qcobjects-openai-api/components\"));\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    document.body.append(components_1.default.chatbotComponent.body);\n});\n"],
  "mappings": "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",
  "names": ["require_com_qcobjects_ui_controllers_openai", "__commonJSMin", "exports", "qcobjects_1", "_ChatbotController", "controllerParams", "component", "text", "sender", "message", "userMessage", "botMessage", "response", "data", "e", "__name", "ChatbotController", "require_com_qcobjects_ui_components_openai", "__commonJSMin", "exports", "sendMessage", "closeChatbot", "qcobjects_1", "com_qcobjects_ui_controllers_openai_1", "_ChatBotComponent", "__name", "ChatBotComponent", "require_components", "__commonJSMin", "exports", "com_qcobjects_ui_components_openai_1", "require_components", "__commonJSMin", "exports", "__importDefault", "mod", "index_1", "require_chat", "__commonJSMin", "exports", "__importDefault", "mod", "components_1"]
}
